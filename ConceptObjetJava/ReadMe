---------Emergeance des concepts fondamentaux de la "Programmation Orientée Objet"---------

Idée de base de la programmation objet :
=> Rassembler en une même entité les données et les traitements qui s'y appliquent.

Le concept de classe:
=>Une classe est un ensemble de données et de fonctions regroupées dans une même entité numérique.
=>Une classe est une description abstraite d'un objet.
NB: Pour accéder à une classe il faut en déclarer une instance de classe ou objet.

Créer une classe:
=>Une classe comporte sa déclaration, des variables et les définitions de ses méthodes.

  Une classe se compose de deux parties : un en-tête et un corps.
  =>Le corps peut être divisé en 2 sections :
  .la déclaration des données et des constantes
  .la définition des méthodes.

La syntaxe de déclaration d'une classe est la suivante, par exemple. : nom_de_classe [extends classe_mere] [implements interfaces] { ... }



Les modificateurs de classe (ClassModifiers) sont :

abstract ===>	la classe contient une ou des méthodes abstraites, qui n'ont pas de définition explicite. Une classe déclarée abstract ne peut pas être instanciée : il faut définir une classe qui hérite de cette classe et qui implémente les méthodes nécessaires pour ne plus être abstraite.
final ===>	la classe ne peut pas être modifiée, sa redéfinition grâce à l'héritage est interdite. Les classes déclarées final ne peuvent donc pas avoir de classes filles.
private ===>	la classe n'est accessible qu'à partir du fichier où elle est définie
public ===>	La classe est accessible partout

//Voir aussi: les accesseurs*//
Le mot clé extends => permet de spécifier une superclasse éventuelle : ce mot clé permet de préciser la classe mère dans une relation d'héritage.
Le mot clé implements => permet de spécifier une ou des interfaces que la classe implémente. Cela permet de récupérer quelques avantages de l'héritage multiple.

NB: L'ordre des méthodes dans une classe n'a pas d'importance.

Instancier un objet:
=>Instancier une classe consiste à créer un objet sur le modèle de la classe avec laquelle il est paramétré.
=>L'opérateur new se charge de créer une instance de la classe et de l'associer à la variable. ex: m = new MaClasse();
=>L'opérateur new est un opérateur de haute priorité qui permet d'instancier des objets et d'appeler une méthode particulière de cet objet : le constructeur. I

L'encapsulation:
A FAIRE

Visibilité des attributs:

=>De nombreux langages orientés objet introduisent des attributs de visibilité pour réglémenter l'accès aux classes et aux objets, aux méthodes et aux données.

public ===>	Une variable, méthode ou classe déclarée public est visible par tous les autres objets.
.Depuis la version 1.0, une seule classe public est permise par fichier et son nom doit correspondre à celui du fichier.
.Dans la philosophie orientée objet aucune donnée d'une classe ne devrait être déclarée publique : il est préférable d'écrire des méthodes pour la consulter et la modifier

par défaut  ===> (dit : : package friendly) Il n'existe pas de mot clé pour définir ce niveau, qui est le niveau par défaut lorsqu'aucun modificateur n'est précisé.
.Cette déclaration permet à une entité (classe, méthode ou variable) d'être visible par toutes les classes se trouvant dans le même package.

protected ===>	Si une méthode ou une variable est déclarée protected, seules les méthodes présentes dans le même package que cette classe ou ses sous-classes pourront y accéder.
.On ne peut pas qualifier une classe avec protected.

private ===> C'est le niveau de protection le plus fort. Les composants ne sont visibles qu'à l'intérieur de la classe
.ils ne peuvent être modifiés que par des méthodes définies dans la classe et prévues à cet effet.
.Les méthodes déclarées private ne peuvent pas être en même temps déclarées abstract car elles ne peuvent pas être redéfinies dans les classes filles.



Les objets:
==>Les objets contiennent des attributs et des méthodes.
==>Les attributs sont des variables ou des objets nécessaires au fonctionnement de l'objet.
NB:La classe est la description d'un objet. Un objet est une instance d'une classe.
Pour chaque instance d'une classe, le code est le même, seules les données sont différentes à chaque objet.

Les modificateurs d'accés, 'accesseurs?':
//A FAIRE//

Les propriétés ou attributs:

Les méthodes:
Les fonctions qui s'opèrent au sein d'une classe sur les données sont appelées des méthodes.
Les méthodes et les données sont pourvues d'attributs de visibilité qui gèrent leur accessibilité par les composants hors de la classe.


Le mot clé static => s'applique aux variables et aux méthodes.
Les variables d'instance sont des variables propres à un objet.
Il est possible de définir une variable de classe qui est partagée entre toutes les instances d'une même classe : elle n'existe donc qu'une seule fois en mémoire.
Une telle variable permet de stocker une constante ou une valeur modifiée tour à tour par les instances de la classe. Elle se définit avec le mot clé static.
NB: Il n'est pas possible d'appeler une méthode d'instance ou d'accéder à une variable d'instance à partir d'une méthode de classe statique.


L'héritage:

Les packages:

Les classes internes:

La gestion dynamique des objets:


